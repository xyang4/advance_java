<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd">
	<context:component-scan base-package="com.tiantian" />
	<context:property-placeholder location="classpath:config/mq.properties" />

	<!-- 1.Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="${mq.brokerURL}" />
		<property name="userName" value="${mq.userName}" />
		<property name="password" value="${mq.password}" />
	</bean>

	<!-- 2.Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="targetConnectionFactory" />
	</bean>

	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>queue</value>
		</constructor-arg>
	</bean>
	<bean id="sessionAwareQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>sessionAwareQueue</value>
		</constructor-arg>
	</bean>
	<!-- 用于测试消息监听适配器的队列目的地 -->
	<bean id="adapterQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>adapterQueue</value>
		</constructor-arg>
	</bean>
	<!-- 用于测试消息回复的 -->
	<bean id="responseQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>responseQueue</value>
		</constructor-arg>
	</bean>
	<!-- 默认的消息回复队列 -->
	<bean id="defaultResponseQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>defaultResponseQueue</value>
		</constructor-arg>
	</bean>

	<!-- 3.消息监听器配置 -->
	<!-- a.普通消息监听器配置，只能接受消息 -->
	<bean id="consumerMessageListener"
		class="com.tiantian.springintejms.listener.ConsumerMessageListener" />
	<!-- b.可以获取session的MessageListener -->
	<bean id="consumerSessionAwareMessageListener"
		class="com.tiantian.springintejms.listener.ConsumerSessionAwareMessageListener">
		<property name="destination" ref="queueDestination" />
	</bean>

	<!-- jms监听容器配置 -->
	<bean id="messageListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination" />
		<property name="messageListener" ref="consumerMessageListener" />
		<!-- 本地的事务管理 -->
		<property name="sessionTransacted" value="true" />
		<!--  //TODO 如果想接收消息和数据库访问处于同一事务中，那么我们就可以配置一个外部的事务管理同时配置一个支持外部事务管理的消息监听容器（如DefaultMessageListenerContainer） -->
	</bean>
	<bean id="sessionAwareListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="sessionAwareQueue" />
		<property name="messageListener" ref="consumerSessionAwareMessageListener" />
	</bean>

	<!-- responseQueue对应的监听器 -->
	<bean id="responseQueueListener"
		class="com.tiantian.springintejms.listener.ResponseQueueListener" />

	<!-- responseQueue对应的监听容器 -->
	<bean id="responseQueueMessageListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="responseQueue" />
		<property name="messageListener" ref="responseQueueListener" />
	</bean>

	<!-- 消息监听适配器 -->
	<bean id="messageListenerAdapter"
		class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<property name="delegate">
			<bean class="com.tiantian.springintejms.listener.ConsumerListener" />
		</property>
		<property name="defaultListenerMethod" value="receiveMessage" />
		<property name="defaultResponseDestination" ref="defaultResponseQueue" />
	</bean>
	<!-- 消息监听适配容器 -->
	<bean id="messageListenerAdapterContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="adapterQueue" />
		<!-- 使用MessageListenerAdapter来作为消息监听器 -->
		<property name="messageListener" ref="messageListenerAdapter" />
	</bean>


	<!-- defaultResponseQueue对应的监听器 -->
	<bean id="defaultResponseQueueListener"
		class="com.tiantian.springintejms.listener.DefaultResponseQueueListener" />
	<!-- defaultResponseQueue对应的监听容器 -->
	<bean id="defaultResponseQueueMessageListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="defaultResponseQueue" />
		<property name="messageListener" ref="defaultResponseQueueListener" />
	</bean>
</beans>